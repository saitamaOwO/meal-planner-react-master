CREATE OR REPLACE FUNCTION generates_plans(budget numeric)
RETURNS TABLE (day int, meal_type varchar, meal_name varchar, price numeric, calories int, total_calories int, updated_budget numeric) AS
$$
DECLARE
    day_counter int := 0;
BEGIN
    updated_budget := budget;

    FOR day_counter IN 1..7 LOOP
        total_calories := 0;

        SELECT day_counter, 'Breakfast', breakfast.meal_name, breakfast.price, breakfast.calories, total_calories, updated_budget
        INTO day, meal_type, meal_name, price, calories, total_calories, updated_budget
        FROM (
            SELECT meals.meal_name, meals.price, meals.calories
            FROM meals
            JOIN meal_types ON meals.type_id = meal_types.type_id
            WHERE meal_types.type_name = 'Breakfast' AND meals.price <= updated_budget
            ORDER BY RANDOM()
            LIMIT 1
        ) AS breakfast;

        IF NOT FOUND THEN
            RAISE EXCEPTION 'No meal plan can be created. Insufficient budget for breakfast on day %.', day_counter;
        END IF;
        total_calories := total_calories + calories;
        updated_budget := updated_budget - price;
        RETURN NEXT;
        SELECT day_counter, 'Lunch', lunch.meal_name, lunch.price, lunch.calories, total_calories, updated_budget
        INTO day, meal_type, meal_name, price, calories, total_calories, updated_budget
        FROM (
            SELECT meals.meal_name, meals.price, meals.calories
            FROM meals
            JOIN meal_types ON meals.type_id = meal_types.type_id
            WHERE meal_types.type_name = 'Lunch' AND meals.price <= updated_budget
            ORDER BY RANDOM()
            LIMIT 1
        ) AS lunch;
        IF NOT FOUND THEN
            RAISE EXCEPTION 'No meal plan can be created. Insufficient budget for lunch on day %.', day_counter;
        END IF;
        total_calories := total_calories + calories;
        updated_budget := updated_budget - price;
        RETURN NEXT;
        SELECT day_counter, 'Dinner', dinner.meal_name, dinner.price, dinner.calories, total_calories, updated_budget
        INTO day, meal_type, meal_name, price, calories, total_calories, updated_budget
        FROM (
            SELECT meals.meal_name, meals.price, meals.calories
            FROM meals
            JOIN meal_types ON meals.type_id = meal_types.type_id
            WHERE meal_types.type_name = 'Dinner' AND meals.price <= updated_budget
            ORDER BY RANDOM()
            LIMIT 1
        ) AS dinner;

        IF NOT FOUND THEN
            RAISE EXCEPTION 'No meal plan can be created. Insufficient budget for dinner on day %.', day_counter;
        END IF;
        total_calories := total_calories + calories;
        updated_budget := updated_budget - price;
        RETURN NEXT;
    END LOOP;
    RETURN;
END;
$$ LANGUAGE plpgsql;
