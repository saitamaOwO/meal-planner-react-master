CREATE OR REPLACE FUNCTION generate_meal_plan(budget numeric)
RETURNS TABLE (day int, meal_type varchar, meal_name varchar, price numeric) AS
$$
DECLARE
    remaining_budget numeric := budget;
    day_counter int := 0;
    meal_name varchar;
    price numeric;
BEGIN
    FOR day_counter IN 1..7 LOOP
        -- Select breakfast
        SELECT meals.meal_name, meals.price
        INTO meal_name, price
        FROM meals
        JOIN meal_types ON meals.type_id = meal_types.type_id
        WHERE meal_types.type_name = 'Breakfast' AND meals.price <= remaining_budget
        ORDER BY RANDOM()
        LIMIT 1;

        -- If no breakfast can be selected, an exception
        IF NOT FOUND THEN
            RAISE EXCEPTION 'No meal plan can be created. Insufficient budget for breakfast on day %.', day_counter;
        END IF;

        -- Update remaining budget after selecting breakfast
        remaining_budget := remaining_budget - price;

        -- Return breakfast for the current day
        RETURN QUERY SELECT day_counter, 'Breakfast'::varchar, meal_name, price;

        -- Select lunch
        SELECT meals.meal_name, meals.price
        INTO meal_name, price
        FROM meals
        JOIN meal_types ON meals.type_id = meal_types.type_id
        WHERE meal_types.type_name = 'Lunch' AND meals.price <= remaining_budget
        ORDER BY RANDOM()
        LIMIT 1;

        -- If no lunch can be selected, an exception
        IF NOT FOUND THEN
            RAISE EXCEPTION 'No meal plan can be created. Insufficient budget for lunch on day %.', day_counter;
        END IF;

        -- Update remaining budget after selecting lunch
        remaining_budget := remaining_budget - price;

        -- Return lunch for the current day
        RETURN QUERY SELECT day_counter, 'Lunch'::varchar, meal_name, price;

        -- Select dinner
        SELECT meals.meal_name, meals.price
        INTO meal_name, price
        FROM meals
        JOIN meal_types ON meals.type_id = meal_types.type_id
        WHERE meal_types.type_name = 'Dinner' AND meals.price <= remaining_budget
        ORDER BY RANDOM()
        LIMIT 1;

        -- If no dinner can be selected, an exception
        IF NOT FOUND THEN
            RAISE EXCEPTION 'No meal plan can be created. Insufficient budget for dinner on day %.', day_counter;
        END IF;

        -- Update remaining budget after selecting dinner
        remaining_budget := remaining_budget - price;

        -- Return dinner for the current day
        RETURN QUERY SELECT day_counter, 'Dinner'::varchar, meal_name, price;
    END LOOP;

    -- If the loop completes without raising an exception, return the completed meal plan
    RETURN;
END;
$$ LANGUAGE plpgsql;
